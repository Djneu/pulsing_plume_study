% Script to calculate max tilt of the plume by determining the max
% temperature at each depth, and finding the angle between points.
% interval can be set.
% This script uses the extracted paraview point data.
clear all
tic

types = [450 650 750]

for c1=1:length(types)
    num = types(c1)

radius1 = 5760000;  %Only look at the uppermost mantle. 5960 for umm 5730 for um
radius2 = 6260000;  %Cut off top to avoid looking at where plume is horizontal.
intradius = radius1 + 0.5*(radius2 - radius1);
interval= 5000;
sample = 100000;

nm = (['_r2_tz31_v8_t' num2str(num) '_p1.mat'])
%nm = '_r2_tz31_v8_t550_p10.mat'
load(['/home/djneuh/Desktop/movies/final_runs/data_files/volume_flux/newdata/vf', nm])

%PathStr=['/home/djneuh/Desktop/movies/final_runs/velocity/r2tz31_v10/data/'];
%PathStr=['/media/djneuh/seagatebasic/pulsing_plume_study/new_runs/final_runs/dislocation/r2tz31_' num2str(num) '/data/'];
PathStr=['/media/djneuh/seagatebasic/pulsing_plume_study/new_runs/final_runs/dislocation/r2tz31_p01/r2tz31_p01/data/'];
name = ["tilt" + nm];

%Set max year as the year max volume flux occurs
[M,I] = max(final410);
maxyear = final410(I(2),1)
year_to_second = 365*24*60*60;

if contains('vf_r2_tz31_v8_t550_p10.mat',nm)
    maxyear = 140;
end

if contains('vf_r2_tz11_v8_t550_p1.mat',nm)
    maxyear = 118.3;
end

for idx = 1:length(final410(:,1))
    if final410(idx,1) > maxyear+10
        minstep = idx;
        break
    end
end


textFiles=dir([PathStr '*.csv']);
tilt = zeros(1600,5);
maxstep = floor(length(textFiles)/2)-1;

parfor k = minstep:maxstep %(floor(length(textFiles)/2)-1)
  % Open point data and gather it.
  tmp_tilt = zeros(1,5);
  textFilename = ['point_' num2str(k) '.csv'];
  fullname = fullfile(PathStr, textFilename);
  fid=fopen(fullname, 'rt');
  Data = csvread(fullname,1);
  fclose(fid);
  
  %Open field data so we know the times.
  textFilename = ['field_' num2str(k) '.csv'];
  fullname = fullfile(PathStr, textFilename);
  fid=fopen(fullname, 'rt');
  fdata = csvread(fullname,1);
  fclose(fid);
  %So I know how far along the script is.
  k
  
%variable to hold the max temp and position at each depth.
fp = zeros((radius2-radius1)/interval+2,4);
placement = 1;
datar= length(Data(1,:)); 
radial = zeros(length(Data),datar);
ftheta = zeros(length(Data),1);

% Convert to radial coordinates.
  for i=1:length(Data)
    radial(i,1) = atand(Data(i,datar-1)/Data(i,datar-2)); % theta
    radial(i,2) = sqrt(Data(i,datar-1)^2 + Data(i,datar-2)^2)/1000; % radius
    radial(i,3) = Data(i,9);   %nonadibatic temperature 14 or 15
  end
  
%Now get rid of any zero's.
%Only keep unique x and y points.
[C, ia, ic] = unique(radial(:,1:2), 'rows');
radial = radial(ia,:);
radial = radial(any(radial,2),:);

% Find all points along a radial depth contour and then determine
% the maximum temperature and position.
for depth = radius1:interval:radius2
    placement = placement + 1;
    degree_to_distance = (depth*2*pi)/360;

    % If the point is within 1 km of depth, consider it part of contour.
    depth2 = depth/1000;
    radial_point = [0,0];
    for i=1:length(radial)
        %rounds(i) = round(radial(i,2)/(interval/1000))*(interval/1000);
    if(round(radial(i,2)/(interval/1000))*(interval/1000) == depth2)
       radial_point(i,1) = radial(i,1); % theta
       radial_point(i,2) = radial(i,3); % temperature 
       radial_point(i,3) = depth2;  % radius
    end
    end
    radial_point = radial_point(any(radial_point,2),:);    
    %stop

%If it's too early then there may be no points, if thats the case don't 
% run into an error.
%empt = isempty(Dnew);
[M, pos] = max(radial_point(:,2));
% Keep the maximum temperature along depth contour.
% Cut off at 150, anything cooler than this may not be part of the main
% plume stem and is considered an artifact.
if M > 150 
    fp(placement,1) = radial_point(pos,2);  % Max temp at depth
    fp(placement,2) = radial_point(pos,1); % distance from center
    fp(placement,3) = depth2;  % radius
else
    fp(placement,1) = 0;
    fp(placement,2) = 0;
    fp(placement,3) = 0;
end
%clearvars -except radial datar PathStr radius1 radius2 p plume g a Data k theta fp frame F tilt fdata PathStr2 v interval placement sample c1 c2

end

% Now we have a temp and position for each depth.
fp = fp(any(fp,2),:);
    if(k==0)
      time=0;
    else 
      %convert to mya)
      time=fdata(2)/(1e6);
    end

% If we have values (i.e. the plume is in the upper mantle), and there
% enough values to indicate the plume then do this.
empt2 = isempty(fp);
if length(fp) < 15
    empt2 = 1;
end

if empt2 == 0
% check for outliers.
difference = zeros(length(fp(:,1))-1,1);
for i = 1:(length(fp(:,1))-1)
    % If we have sudden 40 km increase over 5 km, it's likely noise.
    % For now set only theta to 0 to not mess up difference in subsequent
    % iterations.
    val = fp(i,4);
    difference(i,1) = abs(fp(i+1,2)-fp(i-val,2))*(fp(i-val,3)*2*pi)/360;
    rad_diff = fp(i+1,3)-fp(i-val,3);
    %fp(i,7) = difference(i);   %% 25 km in current ones
    if( difference(i,1) > 50 || rad_diff > 25)
          fp(i+1,4) = fp(i,4)+1;
    else
          fp(i+1,4) = 0;
    end
end
%stop
% remove outliers.
for i = 1:(length(fp(:,1)))   
    %Set depths to zero now.
    if( fp(i,4) > 0)
          fp(i,1) = 0;
          fp(i,2) = 0;
          fp(i,3) = 0;
          fp(i,4) = 0;
     end
end
fp = fp(any(fp,2),:);

if(length(fp(:,1)) < 8)
    tmp_tilt(1,4) = 0; % good one
    continue
end

% Find the distance from 45 degrees, based on the radius.
fp(:,5) = abs(45 - fp(:,2));
fp(:,6) = fp(:,5).*fp(:,3)*2*pi/360;

% Fit a function to our points.
inter = 5;  % km
 x = min(fp(:,3)):inter:max(fp(:,3));   
[p,~,mu] = polyfit(fp(:,3),fp(:,6), 10);
y_fit = polyval(p,x,[],mu);

angle = zeros(length(y_fit)-1,1);
for i=1:length(y_fit)-1  
    % Find distance between points, because it's from 45 degrees
    % distance should always be positive.
    dd = abs(y_fit(i+1) - y_fit(i));
    
    % Convert to 
    angle(i) = 90 - atand(inter/dd);
end


% Remove top and bottom points as they often are not robust.
[a1, pos1] = max(angle); 



avg_interval = 25;
avg_length = round(avg_interval/inter);
pl = 1;

avg2 = zeros(length(angle)-2,1);
for i=3:length(angle)-2
        avg2(i) = (angle(i-2)+ angle(i-1)+ angle(i)+ angle(i+1)+ angle(i+2))/5;
end

tmp_tilt(1,1) = k;
tmp_tilt(1,2) = time;
tmp_tilt(1,3) = NaN;
tmp_tilt(1,4) = max(avg2);

[a2, pos2] = max(avg2); 
%tmp_tilt(k,5) = 5711+pos2*5;
tmp_tilt(1,5) = 6336 - (radius1/1000+pos2*5);
tilt(k,:) = tmp_tilt;
%tilt(k,5) = max(avg4);


% %%%%%%%%%%%Plot our function and how it fits points.
  %clf(figure(1))
  %figure(1)
  %axis equal
  %plot(y_fit,x,'k','LineWidth',1.5)
  %hold on
  %scatter(y_fit(pos1+2),x(pos1+2),'filled')
  %scatter(fp(:,2),fp(:,3))
  %xlabel('Distance from center (km)')
  %ylabel('Radius (km)')
  %pause(0.1)
  %max_angle = a1


%%%%%%%%%%%%Plot showing all point and then the maximum temp line we found.
 %%%%theta = 45-atand(x(pos1+2)/y_fit(pos1+2));
 %%%%Find the distance from 45 degrees, based on the radius.
%  radial(:,5) = abs(45.0 - radial(:,1));
%  radial(:,6) = radial(:,5).*radial(:,2)*2*pi/360;
%  
%   for i =1:length(radial)
%   if(radial(i,3) > 100)
%       pf(i,1) = radial(i,1);
%       pf(i,2) = radial(i,2);
%       pf(i,3) = radial(i,3);
%   end
%   end
%   [a1, pos1] = max(avg2); 
%   pf(:,5) = abs(45.0 - pf(:,1));
%   pf(:,6) = pf(:,5).*pf(:,2)*2*pi/360;
%   
%   x2 = [0 1400];
%   y2 = [x(pos1+2) x(pos1+2)];
%   xm = y_fit(pos1+2);
%   ym = x(pos1+2);
% 
%   xml = [y_fit(pos1) y_fit(pos1+1) y_fit(pos1+2) y_fit(pos1+3) y_fit(pos1+4)];
%   yml = [x(pos1) x(pos1+1) x(pos1+2) x(pos1+3) x(pos1+4)];
%   yt = [6336 6336];
%   y410 = [5961 5961];
%   y660 = [5711 5711];
%   clf(figure(2))
%   figure(2)
%   scatter(pf(:,6),pf(:,2),100,pf(:,3),'.')
%   colormap(bone)
%   hold on
%   plot(y_fit,x,'k','LineWidth',5)
%   scatter(fp(:,6),fp(:,3),200,'r.')
%   plot(xml,yml,'c','LineWidth',4)
%   scatter(xm,ym,1400,'c.')
%   %set(gca, 'XDir','reverse')
%   %plot(x2,y2,'r--','LineWidth',1.5)
%   plot(x2,yt,'k','LineWidth',2)
%   plot(x2,y410,'k:','LineWidth',1)
%   plot(x2,y660,'k:','LineWidth',1)
%   axis equal
%   text(225,6100,['Max tilt: ', num2str(round(max(avg2))), char(176)],'Color','black','FontSize',20,'FontWeight','bold')
%   xlabel('Distance from model center (km)')
%   ylabel('Radius (km)')
%   text(625,6325,['Top boundary'],'FontSize',16)
%   text(800,5975,['410-km transition'],'FontSize',16)
%   text(800,5725,['660-km transition'],'FontSize',16)
%   set(gca,'FontSize',14)
%   %xlim([0 1400]);
%   xlim([200 1000]);
%   ylim([5700 6350]);
  %stop
% % %  
%    pause(0.1)
end
%clearvars -except radius1 radius2 k g a PathStr mean_Ra F frame tilt  PathStr2 v interval
end

tilt = tilt(any(tilt,2),:);
save(name, 'tilt')
%save(['tilt_2021-hr2-',num2str(c1),'-',num2str(c2)], 'tilt');
%clearvars -except c1 c2 tilt
%clear
end


toc
delete(gcp('nocreate'))
